Write an efficient algorithm that searches for a value in an m x n matrix.

This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than or equal to the last integer of the previous row

Example:

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return 1 ( 1 corresponds to true )

Return 0 / 1 ( 0 if the element is not present, 1 if the element is present ) for this problem





public class Solution {
    public int searchMatrix(ArrayList<ArrayList<Integer>> a, int b) {
        
        int mid=0;
        int low=0;
        for(int i=0;i<a.size();i++)
        
        {
            low=0;
           int high=a.get(i).size()-1;
             while(low<=high)
        {
            
            if(a.get(i).get(low)>b)
            return 0;
            
            if(a.get(i).get(high)<b)
            break;
            
            mid=low+(high-low)/2;
            if(a.get(i).get(mid)==b)
            return 1;
            else
            {
                if(a.get(i).get(mid)>b)
                high=mid-1;
            
                else
                low=mid+1;
            }
            
        }
        }
        return 0;
        
        
    }
}
