Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

 Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle. 



Java

public class Solution {
	public int minimumTotal(ArrayList<ArrayList<Integer>> a) {
	    
	    
	    int r=a.size();
	    int c=r-1;
	    for(int i=r-2;i>=0;i--)
	    {
	        
	        for(int j=0;j<c;j++)
	        {
	            int b=Math.min(a.get(i+1).get(j),a.get(i+1).get(j+1));
	            b=b+a.get(i).get(j);
	            a.get(i).set(j,b);
	            
	        }
	        c--;
	    }
	return a.get(0).get(0);
	    
	}
}
