Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

The first call to next() will return the smallest number in BST. Calling next() again will return the next smallest number in the BST, and so on.

 Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
Try to optimize the additional space complexity apart from the amortized time complexity. 


Asked in:  
Apple
Amazon
Facebook


//java

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class Solution {
       PriorityQueue<Integer> q=new PriorityQueue<Integer>();
    public Solution(TreeNode root) {
        if(root!=null)
        traverse(root);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        boolean t=true;
        
        if(q.size()<=0)
        return false;
        
        return t;
        
    }

    /** @return the next smallest number */
    public int next() {
        int k=q.poll();
        return k;
    }
    
    public  void traverse(TreeNode A)
    {
        if(A==null)
        return ;
        
        q.add(A.val);
        traverse(A.left);
        traverse(A.right);
    }
}

/**
 * Your Solution will be called like this:
 * Solution i = new Solution(root);
 * while (i.hasNext()) System.out.print(i.next());
 */
