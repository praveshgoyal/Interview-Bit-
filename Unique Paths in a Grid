Given a grid of size m * n, lets assume you are starting at (1,1) and your goal is to reach (m,n). At any instance, if you are on (x,y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example :
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

 Note: m and n will be at most 100. 
 
 
 
 Java
 
 public class Solution {
    public int uniquePathsWithObstacles(int[][] a) {
     int r=a.length;
        int c=a[0].length;
        if(a[r-1][c-1]==1 || a[0][0]==1)
        return 0;
        int count=0;
       for(int j=1;j<c;j++)
       {
           if(a[0][j]!=1 &&  a[0][j-1]!=1 && count==0)
           a[0][j]=2;
           else
           count++;
       }
       count=0;
       for(int i=1;i<r;i++)
       {
           if(a[i][0]!=1 &&  a[i-1][0]!=1 && count==0)
           a[i][0]=2;
           else
           count++;
       }
       
       for(int i=1;i<r;i++){
       
       for(int j=1;j<c;j++)
       {
           int b=0;
             if(a[i][j]!=1)
             {
              if(a[i][j-1]!=1)
              b+=a[i][j-1];
              if(a[i-1][j]!=1)
              b+=a[i-1][j];
              a[i][j]=b; 
             }
           
       }
       
           
       }
       
         if(r==1 && c==1 && a[0][0]==0)
         return 1;
        return (a[r-1][c-1]/2);
        
    }
}
